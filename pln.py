# -*- coding: utf-8 -*-
"""PLN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w10YYCCmithXA1C1L3Rd3sNZIpEX86sD
"""

import pandas as pd
import re
from nltk.corpus import stopwords
import os
import json
import nltk
nltk.download('stopwords')
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np

df = pd.read_csv('https://raw.githubusercontent.com/MatheusFreitag/SACOMP_2019/master/data/Lorde.tsv', sep='\t')
del df['Unnamed: 0']

df

def remove_stopwords(text):
    text = text.split(' ')
    text = [x for x in text if x not in stopwords.words('english')]
    return ' '.join(text)

df.loc[:, 'Corpus'] = df.loc[:, 'Corpus'].apply(lambda x: remove_stopwords(x))

df

def remove_ponctuation(text):
    return  " ".join(re.findall("[a-zA-Z]+", text))

df.loc[:, 'Corpus'] = df.loc[:, 'Corpus'].apply(lambda x: remove_ponctuation(x))

df

def remove_words_with_less_3(text):
    text = text.split(' ')
    text = [x for x in text if len(x)>3]
    return ' '.join(text)

df.loc[:, 'Corpus'] = df.loc[:, 'Corpus'].apply(lambda x: remove_words_with_less_3(x))

df

df.loc[:, 'Corpus'] = df.loc[:, 'Corpus'].apply(lambda x: x.lower())

df['Word Count'] = df['Corpus'].apply(lambda x: len(x.split(' ')) )

df

figure(figsize=(15,7))
(n, bins, patches) = plt.hist(df['Word Count'], 10)

plt.xlabel('Word Count')
plt.ylabel('Songs')
plt.title('Words per song')

plt.show()

popular_words = dict()

l = []
for row in df.iterrows():
    l += row[1]['Corpus'].split(' ')

for word in l:
    if word not in popular_words.keys():
        popular_words[word] = 1
    else:
        popular_words[word] += 1

popular_words_x = sorted(popular_words, key=popular_words.get,reverse=True)[:10][::-1]

popular_words_y = [popular_words.get(key) for key in sorted(popular_words, key=popular_words.get, reverse=True)[:10]][::-1]

figure(figsize=(15,7))
plt.barh(popular_words_x, popular_words_y)

plt.title("Most popular words on Lorde's lyrics")
plt.xlabel('# of ocurrencies')
plt.ylabel('Words')


plt.show()

popular_words_2017 = dict()
popular_words_2013 = dict()

l_2017 = []
for row in df[df['Ano'] == 2017].iterrows():
    l_2017 += row[1]['Corpus'].split(' ')
    
l_2013 = []
for row in df[df['Ano'] == 2013].iterrows():
    l_2013 += row[1]['Corpus'].split(' ')

for word in l_2017:
    if word not in popular_words_2017.keys():
        popular_words_2017[word] = 1
    else:
        popular_words_2017[word] += 1
        
for word in l_2013:
    if word not in popular_words_2013.keys():
        popular_words_2013[word] = 1
    else:
        popular_words_2013[word] += 1

popular_words_2017_x = sorted(popular_words_2017, key=popular_words_2017.get, reverse=True)[:10][::-1]
popular_words_2013_x = sorted(popular_words_2013, key=popular_words_2013.get, reverse=True)[:10][::-1]

popular_words_2017_y = [popular_words_2017.get(key) for key in sorted(popular_words_2017, key=popular_words_2017.get, reverse=True)[:10]][::-1]
popular_words_2013_y = [popular_words_2013.get(key) for key in sorted(popular_words_2013, key=popular_words_2013.get, reverse=True)[:10]][::-1]

figure(figsize=(15,7))

plt.subplot(1, 2, 1)
plt.barh(popular_words_2017_x, popular_words_2017_y)
plt.title("Most popular words for 'Melodrama'")
plt.xlabel('# of ocurrencies')
plt.ylabel('Words')

plt.subplot(1, 2, 2)
plt.barh(popular_words_2013_x, popular_words_2013_y, color='y')
plt.title("Most popular words for 'Pure Heroine(Extended)'")
plt.xlabel('# of ocurrencies')
plt.ylabel('Words')

doc_Melodrama =  []
for row in df[df['Ano'] == 2017].iterrows():
    doc_Melodrama += row[1]['Corpus'].split(' ')
    

doc_PureHeroine =  []
for row in df[df['Ano'] == 2013].iterrows():
    doc_PureHeroine += row[1]['Corpus'].split(' ')

doc_Melodrama = ' '.join(doc_Melodrama)

doc_PureHeroine = ' '.join(doc_PureHeroine)

tfidf = TfidfVectorizer()
response = tfidf.fit_transform([doc_Melodrama, doc_PureHeroine])

scores = zip(tfidf.get_feature_names(), np.asarray(response.sum(axis=0)).ravel())

sorted_scores = sorted(scores, key=lambda x: x[1], reverse=True)

sorted_scores[:]

doc_Melodrama = df[df['Ano'] == 2017].loc[:, 'Corpus'].to_list()
response = tfidf.fit_transform([doc for doc in doc_Melodrama])
scores = zip(tfidf.get_feature_names(), np.asarray(response.sum(axis=0)).ravel())
sorted_scores_Melodrama = sorted(scores, key=lambda x: x[1], reverse=True)

doc_PureHeroine = df[df['Ano'] == 2013].loc[:, 'Corpus'].to_list()
response = tfidf.fit_transform([doc for doc in doc_PureHeroine])
scores = zip(tfidf.get_feature_names(), np.asarray(response.sum(axis=0)).ravel())
sorted_scores_PureHeorine = sorted(scores, key=lambda x: x[1], reverse=True)

figure(figsize=(15,7))

plt.subplot(1, 2, 1)
plt.barh([x[0] for x in sorted_scores_Melodrama[:10]][::-1], [x[1] for x in sorted_scores_Melodrama[:10]][::-1])
plt.title("Most important words for 'Melodrama'")
plt.xlabel('TF-IDF Score')
plt.ylabel('Words')

plt.subplot(1, 2, 2)
plt.barh([x[0] for x in sorted_scores_PureHeorine[:10]][::-1], [x[1] for x in sorted_scores_PureHeorine[:10]][::-1], color='y')
plt.title("Most important words for 'Pure Heroine(Extended)'")
plt.xlabel('TF-IDF Score')
plt.ylabel('Words')

df_nrc = pd.read_csv('https://raw.githubusercontent.com/MatheusFreitag/SACOMP_2019/master/data/NRC.tsv', sep='\t',  names=['Sentiment', 'Filter', 'Score'])

set_of_nrc_words = df_nrc.loc[:, 'Sentiment'].unique()

set_of_nrc_words_Melodrama = set()
set_of_nrc_words_PureHeroine = set()

for word in ' '.join(doc_Melodrama).split(' '):
    if word in set_of_nrc_words:
        set_of_nrc_words_Melodrama.add(word)
        
        
for word in ' '.join(doc_PureHeroine).split(' '):
    if word in set_of_nrc_words:
        set_of_nrc_words_PureHeroine.add(word)

nrc_score_Melodrama = df_nrc[(df_nrc['Sentiment'].isin(set_of_nrc_words_Melodrama)) & (df_nrc['Score'] == 1)].groupby(['Filter']).sum()
nrc_score_Melodrama = nrc_score_Melodrama.sort_values(by='Score', ascending=False).iloc[2:, :]

nrc_score_PureHeroine = df_nrc[(df_nrc['Sentiment'].isin(set_of_nrc_words_PureHeroine)) & (df_nrc['Score'] == 1)].groupby(['Filter']).sum()
nrc_score_PureHeroine = nrc_score_PureHeroine.sort_values(by='Score', ascending=False).iloc[2:, :]

figure(figsize=(20,7))

plt.subplot(1, 2, 1)
plt.barh(nrc_score_Melodrama.index[::-1], [value[0] for value in nrc_score_Melodrama.values][::-1])
plt.title("Melodrama")
plt.xlabel('Count')
plt.ylabel('Words')


plt.subplot(1, 2, 2)
plt.barh(nrc_score_PureHeroine.index[::-1], [value[0] for value in nrc_score_PureHeroine.values][::-1])
plt.title("Pure Heroine")
plt.xlabel('Count')
plt.ylabel('Words')

nrc_score_PureHeroine.index, [value[0] for value in nrc_score_PureHeroine.values]

words_for_positive_sentiments_Melodrama = df_nrc[\
       (df_nrc['Sentiment'].isin(set_of_nrc_words_Melodrama)) & \
       (df_nrc['Score'] == 1) & \
       (df_nrc['Filter'] == 'positive')].loc[:, 'Sentiment'].values

words_for_negative_sentiments_Melodrama = df_nrc[\
       (df_nrc['Sentiment'].isin(set_of_nrc_words_Melodrama)) & \
       (df_nrc['Score'] == 1) & \
       (df_nrc['Filter'] == 'negative')].loc[:, 'Sentiment'].values

words_for_positive_sentiments_PureHeroine = df_nrc[\
       (df_nrc['Sentiment'].isin(set_of_nrc_words_PureHeroine)) & \
       (df_nrc['Score'] == 1) & \
       (df_nrc['Filter'] == 'positive')].loc[:, 'Sentiment'].values

words_for_negative_sentiments_PureHeroine = df_nrc[\
       (df_nrc['Sentiment'].isin(set_of_nrc_words_PureHeroine)) & \
       (df_nrc['Score'] == 1) & \
       (df_nrc['Filter'] == 'negative')].loc[:, 'Sentiment'].values

positive_count_Melodrama = dict()
negative_count_Melodrama = dict()

positive_count_PureHeroine = dict()
negative_count_PureHeroine = dict()

for word in ' '.join(doc_Melodrama).split(' '):
    if word in words_for_positive_sentiments_Melodrama:
        if word in positive_count_Melodrama.keys():
            positive_count_Melodrama[word]+=1
        else:
            positive_count_Melodrama[word] = 1
            
for word in ' '.join(doc_Melodrama).split(' '):
    if word in words_for_negative_sentiments_Melodrama:
        if word in negative_count_Melodrama.keys():
            negative_count_Melodrama[word]+=1
        else:
            negative_count_Melodrama[word] = 1
            
            
for word in ' '.join(doc_PureHeroine).split(' '):
    if word in words_for_positive_sentiments_PureHeroine:
        if word in positive_count_PureHeroine.keys():
            positive_count_PureHeroine[word]+=1
        else:
            positive_count_PureHeroine[word] = 1
            
for word in ' '.join(doc_PureHeroine).split(' '):
    if word in words_for_negative_sentiments_PureHeroine:
        if word in negative_count_PureHeroine.keys():
            negative_count_PureHeroine[word]+=1
        else:
            negative_count_PureHeroine[word] = 1

positive_x_Melodrama = sorted(positive_count_Melodrama, key=positive_count_Melodrama.get, reverse=True)[:10]
positive_y_Melodrama = [positive_count_Melodrama.get(key) for key in sorted(positive_count_Melodrama, key=positive_count_Melodrama.get, reverse=True)][:10]

negative_x_Melodrama = sorted(negative_count_Melodrama, key=negative_count_Melodrama.get, reverse=True)[:10]
negative_y_Melodrama = [negative_count_Melodrama.get(key) for key in sorted(negative_count_Melodrama, key=negative_count_Melodrama.get, reverse=True)][:10]


positive_x_PureHeroine = sorted(positive_count_PureHeroine, key=positive_count_PureHeroine.get, reverse=True)[:10]
positive_y_PureHeroine = [positive_count_PureHeroine.get(key) for key in sorted(positive_count_PureHeroine, key=positive_count_PureHeroine.get, reverse=True)][:10]

negative_x_PureHeroine = sorted(negative_count_PureHeroine, key=negative_count_PureHeroine.get, reverse=True)[:10]
negative_y_PureHeroine = [negative_count_PureHeroine.get(key) for key in sorted(negative_count_PureHeroine, key=negative_count_PureHeroine.get, reverse=True)][:10]

figure(figsize=(20,20))

plt.subplot(2, 2, 1)
plt.barh(positive_x_Melodrama[::-1], positive_y_Melodrama[::-1], color='pink')
plt.title("Top contribution for Positive sentiments in Melodrama")
plt.xlabel('Count')
plt.ylabel('Words')


plt.subplot(2, 2, 2)
plt.barh(negative_x_Melodrama[::-1], negative_y_Melodrama[::-1])
plt.title("Top contribution for Negative sentiments in Melodrama")
plt.xlabel('Count')
plt.ylabel('Words')


plt.subplot(2, 2, 3)
plt.barh(positive_x_PureHeroine[::-1], positive_y_PureHeroine[::-1], color='pink')
plt.title("Top contribution for Positive sentiments in Pure Heroine")
plt.xlabel('Count')
plt.ylabel('Words')


plt.subplot(2, 2, 4)
plt.barh(negative_x_PureHeroine[::-1], negative_y_PureHeroine[::-1])
plt.title("Top contribution for Negative sentiments in Pure Heroine")
plt.xlabel('Count')
plt.ylabel('Words')

